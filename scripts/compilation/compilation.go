// Code generated by go-bindata.
// sources:
// scripts/compilation/fake-compile.sh
// scripts/compilation/fake-prerequisites.sh
// scripts/compilation/ubuntu-compile.sh
// scripts/compilation/ubuntu-prerequisites.sh
// DO NOT EDIT!

package compilation

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsCompilationFakeCompileSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xad\xc8\x2c\x51\x30\x00\x04\x00\x00\xff\xff\x4f\xf8\xd2\x86\x06\x00\x00\x00")

func scriptsCompilationFakeCompileShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsCompilationFakeCompileSh,
		"scripts/compilation/fake-compile.sh",
	)
}

func scriptsCompilationFakeCompileSh() (*asset, error) {
	bytes, err := scriptsCompilationFakeCompileShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/compilation/fake-compile.sh", size: 6, mode: os.FileMode(420), modTime: time.Unix(1442944400, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsCompilationFakePrerequisitesSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xad\xc8\x2c\x51\x30\x00\x04\x00\x00\xff\xff\x4f\xf8\xd2\x86\x06\x00\x00\x00")

func scriptsCompilationFakePrerequisitesShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsCompilationFakePrerequisitesSh,
		"scripts/compilation/fake-prerequisites.sh",
	)
}

func scriptsCompilationFakePrerequisitesSh() (*asset, error) {
	bytes, err := scriptsCompilationFakePrerequisitesShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/compilation/fake-prerequisites.sh", size: 6, mode: os.FileMode(420), modTime: time.Unix(1442944400, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsCompilationUbuntuCompileSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\xcf\x6a\xf2\x40\x14\xc5\xf7\xf3\x14\x97\x7c\xe1\x5b\x14\xd2\xa0\xdb\x92\x42\x2a\xc1\x4a\x35\x8a\x8a\x9b\x52\x64\x9a\xdc\x98\x8b\x99\x3f\x64\x46\x6b\x7d\xfa\x8e\x9a\x56\x2d\x69\xbb\x1c\xce\xef\x9c\x33\xf7\x18\xb4\x10\x20\xfc\x03\xdc\x91\x05\x12\x02\x73\xe2\x16\xab\x77\xa0\x02\x38\x18\x12\xba\x42\xc8\x94\x10\x5c\xe6\x47\xc8\xc0\x1b\xd9\xd2\x69\x52\xc9\x60\x8f\xb5\x02\x63\xb9\xdd\x18\xc6\x34\xcf\xd6\x7c\x85\x29\x17\x18\xf9\x9d\xcf\xe7\x02\x6b\x43\x4a\x46\x7e\x97\x31\x97\xf9\x0c\xc1\x1e\x3c\xff\x82\xf5\xe0\xe5\x8e\xd9\x12\x25\x03\xc0\xac\x54\xe0\x4d\x4e\x22\x48\xa7\xba\x1a\x0b\x46\x63\x46\x05\x61\xee\x41\xe7\xfe\x7f\xf7\x00\x1e\xbe\xdb\x61\x05\xb5\x84\x36\x8d\x3f\xe7\x6e\x4f\xc0\xdf\xd1\x62\x9d\x53\x0d\x81\x86\x70\xcb\xeb\x70\x9b\x71\xcd\x58\xa6\x21\xa8\x21\x2c\xc8\x18\xaa\x30\x20\xf9\xa5\x85\x37\x97\x1c\xee\xb4\xaa\x2d\x3c\x8c\x67\x8f\xcb\xde\x78\x34\x19\x0c\x93\xe5\x3c\x9e\xf6\x93\x79\xe4\x9d\x2d\x46\x6d\xea\x0c\xc3\xab\x3d\xae\xac\x83\x74\x36\x8f\x87\xc3\x16\x6b\x63\x31\xbf\x98\x27\x71\xef\x29\xee\x27\xcb\x34\x1e\x25\xd1\x25\xd6\x4a\x2d\x92\xe9\x6c\x30\x4e\xa3\x6f\x3b\xba\x53\x8e\xeb\xf5\x94\xd0\x54\x91\x5c\x81\x55\xe0\xb7\x7c\xce\x63\xac\x92\x10\x98\xf3\x38\x6a\x63\x5b\x49\xb7\x62\xde\x08\xd7\xd3\xb0\x57\x6e\x4a\xb8\x6d\x6e\x73\x5d\x8c\x7d\x04\x00\x00\xff\xff\x67\x85\x29\x11\xa2\x02\x00\x00")

func scriptsCompilationUbuntuCompileShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsCompilationUbuntuCompileSh,
		"scripts/compilation/ubuntu-compile.sh",
	)
}

func scriptsCompilationUbuntuCompileSh() (*asset, error) {
	bytes, err := scriptsCompilationUbuntuCompileShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/compilation/ubuntu-compile.sh", size: 674, mode: os.FileMode(420), modTime: time.Unix(1442944400, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsCompilationUbuntuPrerequisitesSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x54\x5d\x6b\x64\x37\x0c\x7d\xbf\xbf\x42\xec\x16\xfa\xb2\x77\xa6\xd9\xb6\x0b\xdd\xb2\x0f\x6d\xb3\x85\xbe\x24\x50\xb6\xf4\x25\xb0\xe8\xda\x9a\xb9\x22\xfe\xaa\x25\x67\x72\xf3\xeb\x2b\x3b\x33\x21\x85\xc2\xe0\xb1\xad\x0f\x1f\x1d\x1d\x5d\x21\x85\x99\xe0\x2d\xd0\x23\x2b\x70\x8c\xe4\x19\x95\xc2\x06\x7c\x00\x04\xe1\x58\x02\x81\xcb\x31\x62\xf2\xc3\x49\xe0\xc4\xba\x9a\x2d\xe5\x34\x3f\x51\xcd\x20\x8a\xda\x64\x1a\xa9\x9a\xa5\xaa\x54\x72\x55\xd0\x95\xa0\x09\x1e\x09\xf2\x01\x5a\xe2\xc4\xca\x18\xf8\x89\x3c\x3c\x60\x65\x5c\x02\xc9\x34\xbd\x85\xbf\x84\x86\xef\x21\x87\x90\x4f\x9c\x8e\xb6\xab\xc0\x49\x0a\x57\x54\xce\xe9\xa3\x39\xad\xaa\x45\x3e\xee\xf7\x47\x7b\xbb\x2d\x3b\x03\xb4\x77\x21\x37\x7f\xc8\x2d\xf9\xba\xed\x97\x2c\xeb\x5e\x2b\xd1\x3e\xa2\x28\xd5\xbd\x2d\xd1\x51\x08\x5f\x97\xc6\xc1\x8f\x0b\x83\x22\x96\xca\x7e\x7f\x13\xf8\x9c\xbe\x55\x38\x61\x32\xa0\xd9\x70\x3e\x63\x10\x8c\x04\x91\xdc\x8a\x89\x25\x0a\xa0\x74\x12\xce\xa9\x76\x16\xf9\x5b\x4e\x8a\x9c\xa8\x0a\xc8\x9a\x5b\xf0\xb0\x58\x40\xae\x04\x81\x8f\xab\x9e\xa8\xaf\xef\xa0\x93\x75\xa2\x57\x2e\xbd\xda\xfe\xb2\xbd\xe5\x56\xaa\x75\x83\xc2\xee\x7e\xf8\xb9\x26\x9a\xa3\xf1\x02\xb9\x55\xf0\x54\x28\x79\x4a\x8e\x3b\x3b\x9e\x16\xf9\xf4\x26\xf0\x22\x12\x66\x4f\x0f\x10\xc4\xc8\x14\xad\xe8\x08\x16\x4e\xfe\xa7\x79\xcd\xa2\xe0\x93\x34\xe5\x20\xa0\xae\xf8\x16\x0b\x70\x19\xe7\x19\x6b\xe9\x8c\xde\x4d\xae\xd5\x00\xa7\xa3\xf5\xc8\xb2\xf5\xc3\xf7\x2f\x9b\x91\x78\x61\xc9\xa9\x5f\x55\x42\x1f\xac\xc2\x0f\xe3\xfa\x6e\xb2\xab\xc7\x18\xde\xc3\xf9\xff\x19\x85\xed\x25\xe8\xd5\xee\xea\x65\x3b\xee\x9f\xb8\x58\xa7\xfb\x7a\x37\xa5\x83\xcc\x5d\x37\x96\xf5\x10\xe8\x11\x8a\x44\x16\x07\x58\x0a\x56\x23\x6c\x7e\xc6\xcb\x45\x87\x10\x40\x36\xe9\x3a\xb2\xc0\x2a\x5b\x72\x90\x8d\x06\x91\x75\x16\xaa\x0f\x54\x61\x54\x5c\x73\xd3\x4e\xf4\x92\x0c\xb7\x90\xfc\x38\x1e\xfd\xa7\x65\xc5\x67\xa0\xc8\xf9\x0a\x8e\x7e\x19\xa5\x61\x79\x3f\x1b\x45\x2f\xfb\x33\xf0\xe5\xe9\xfd\xb9\x32\x17\xf1\xde\x24\xda\xd8\x5f\x6c\x47\x57\xb7\xa2\xe3\xe4\x70\xb6\x07\x95\x0f\xec\x6c\x1e\xc4\xdc\xc5\x09\x6b\xce\x06\x3a\x1e\x4d\x8f\xb9\x58\xdf\x7d\x0b\x34\xa3\x08\x1b\x76\x53\x92\xb5\x6b\xa5\x50\x0c\x6f\x35\xc1\x2b\x58\xa9\x6a\x72\xbf\x9b\x30\xa1\xab\xc6\x84\x75\x4f\x4f\x58\x69\x2e\xd5\x0a\xb4\xf4\x74\x21\xe9\xcd\x34\xd1\xe3\x98\x9b\xeb\xcf\xbf\xfe\xf1\xcb\xcd\xd7\xdf\xff\xbc\xbd\xf9\xf2\xf9\xe6\xfa\x93\xcd\x19\x27\x93\x34\x3a\xe5\x07\x9a\x26\x34\x84\xbd\x8f\xad\x78\x43\xf6\x72\xb4\x81\x51\x0c\x01\xe6\x0d\xbe\xe9\xb2\xe9\xa3\xf5\xe5\xf6\xfa\xf6\x62\x18\xa3\xd4\x47\xd1\xea\xdc\x30\x86\x57\xe2\xec\x30\xbb\xa5\x4f\x40\x6d\xcb\xf6\x9f\x90\x77\x5d\xb6\x7d\x20\xf5\xb5\x9c\x2d\xc6\xdd\x9f\x67\xbb\x7f\x13\xf2\x29\xfd\x0c\x26\x6c\xea\xb2\xbf\x40\xf9\x6e\x77\xb5\xfb\x61\xc4\xb7\x62\x9a\x25\x8c\x17\x93\x0c\xdb\x87\xff\x03\x7f\x86\xd7\x9b\x30\x4d\xff\x06\x00\x00\xff\xff\x55\xc9\xb3\xea\x9f\x04\x00\x00")

func scriptsCompilationUbuntuPrerequisitesShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsCompilationUbuntuPrerequisitesSh,
		"scripts/compilation/ubuntu-prerequisites.sh",
	)
}

func scriptsCompilationUbuntuPrerequisitesSh() (*asset, error) {
	bytes, err := scriptsCompilationUbuntuPrerequisitesShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/compilation/ubuntu-prerequisites.sh", size: 1183, mode: os.FileMode(420), modTime: time.Unix(1442944400, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/compilation/fake-compile.sh": scriptsCompilationFakeCompileSh,
	"scripts/compilation/fake-prerequisites.sh": scriptsCompilationFakePrerequisitesSh,
	"scripts/compilation/ubuntu-compile.sh": scriptsCompilationUbuntuCompileSh,
	"scripts/compilation/ubuntu-prerequisites.sh": scriptsCompilationUbuntuPrerequisitesSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"compilation": &bintree{nil, map[string]*bintree{
			"fake-compile.sh": &bintree{scriptsCompilationFakeCompileSh, map[string]*bintree{
			}},
			"fake-prerequisites.sh": &bintree{scriptsCompilationFakePrerequisitesSh, map[string]*bintree{
			}},
			"ubuntu-compile.sh": &bintree{scriptsCompilationUbuntuCompileSh, map[string]*bintree{
			}},
			"ubuntu-prerequisites.sh": &bintree{scriptsCompilationUbuntuPrerequisitesSh, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


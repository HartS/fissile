// Code generated by go-bindata.
// sources:
// scripts/compilation/fake-compile.sh
// scripts/compilation/fake-prerequisites.sh
// scripts/compilation/ubuntu-compile.sh
// scripts/compilation/ubuntu-prerequisites.sh
// DO NOT EDIT!

package compilation

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsCompilationFakeCompileSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xad\xc8\x2c\x51\x30\x00\x04\x00\x00\xff\xff\x4f\xf8\xd2\x86\x06\x00\x00\x00")

func scriptsCompilationFakeCompileShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsCompilationFakeCompileSh,
		"scripts/compilation/fake-compile.sh",
	)
}

func scriptsCompilationFakeCompileSh() (*asset, error) {
	bytes, err := scriptsCompilationFakeCompileShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/compilation/fake-compile.sh", size: 6, mode: os.FileMode(420), modTime: time.Unix(1444232057, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsCompilationFakePrerequisitesSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xad\xc8\x2c\x51\x30\x00\x04\x00\x00\xff\xff\x4f\xf8\xd2\x86\x06\x00\x00\x00")

func scriptsCompilationFakePrerequisitesShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsCompilationFakePrerequisitesSh,
		"scripts/compilation/fake-prerequisites.sh",
	)
}

func scriptsCompilationFakePrerequisitesSh() (*asset, error) {
	bytes, err := scriptsCompilationFakePrerequisitesShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/compilation/fake-prerequisites.sh", size: 6, mode: os.FileMode(420), modTime: time.Unix(1444232057, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsCompilationUbuntuCompileSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\xcf\x6a\xf2\x40\x14\xc5\xf7\xf3\x14\x97\x7c\xe1\x5b\x14\xd2\xa0\xdb\x92\x42\x2a\xc1\x4a\x35\x8a\x8a\x9b\x52\x64\x9a\xdc\x98\x8b\x99\x3f\x64\x46\x6b\x7d\xfa\x8e\x9a\x56\x2d\x69\xbb\x1c\xce\xef\x9c\x33\xf7\x18\xb4\x10\x20\xfc\x03\xdc\x91\x05\x12\x02\x73\xe2\x16\xab\x77\xa0\x02\x38\x18\x12\xba\x42\xc8\x94\x10\x5c\xe6\x47\xc8\xc0\x1b\xd9\xd2\x69\x52\xc9\x60\x8f\xb5\x02\x63\xb9\xdd\x18\xc6\x34\xcf\xd6\x7c\x85\x29\x17\x18\xf9\x9d\xcf\xe7\x02\x6b\x43\x4a\x46\x7e\x97\x31\x97\xf9\x0c\xc1\x1e\x3c\xff\x82\xf5\xe0\xe5\x8e\xd9\x12\x25\x03\xc0\xac\x54\xe0\x4d\x4e\x22\x48\xa7\xba\x1a\x0b\x46\x63\x46\x05\x61\xee\x41\xe7\xfe\x7f\xf7\x00\x1e\xbe\xdb\x61\x05\xb5\x84\x36\x8d\x3f\xe7\x6e\x4f\xc0\xdf\xd1\x62\x9d\x53\x0d\x81\x86\x70\xcb\xeb\x70\x9b\x71\xcd\x58\xa6\x21\xa8\x21\x2c\xc8\x18\xaa\x30\x20\xf9\xa5\x85\x37\x97\x1c\xee\xb4\xaa\x2d\x3c\x8c\x67\x8f\xcb\xde\x78\x34\x19\x0c\x93\xe5\x3c\x9e\xf6\x93\x79\xe4\x9d\x2d\x46\x6d\xea\x0c\xc3\xab\x3d\xae\xac\x83\x74\x36\x8f\x87\xc3\x16\x6b\x63\x31\xbf\x98\x27\x71\xef\x29\xee\x27\xcb\x34\x1e\x25\xd1\x25\xd6\x4a\x2d\x92\xe9\x6c\x30\x4e\xa3\x6f\x3b\xba\x53\x8e\xeb\xf5\x94\xd0\x54\x91\x5c\x81\x55\xe0\xb7\x7c\xce\x63\xac\x92\x10\x98\xf3\x38\x6a\x63\x5b\x49\xb7\x62\xde\x08\xd7\xd3\xb0\x57\x6e\x4a\xb8\x6d\x6e\x73\x5d\x8c\x7d\x04\x00\x00\xff\xff\x67\x85\x29\x11\xa2\x02\x00\x00")

func scriptsCompilationUbuntuCompileShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsCompilationUbuntuCompileSh,
		"scripts/compilation/ubuntu-compile.sh",
	)
}

func scriptsCompilationUbuntuCompileSh() (*asset, error) {
	bytes, err := scriptsCompilationUbuntuCompileShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/compilation/ubuntu-compile.sh", size: 674, mode: os.FileMode(420), modTime: time.Unix(1444232057, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsCompilationUbuntuPrerequisitesSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x54\x4b\x6b\x24\x37\x10\xbe\xf7\xaf\x28\xbc\x81\x5c\x56\x33\xb1\x93\x2c\x64\x82\x0f\x49\xbc\x81\x5c\x6c\x08\x1b\x72\x19\x58\xd4\x52\x75\x77\x61\xbd\xa2\x92\xdc\xd3\xfe\xf5\x29\x69\xc6\x83\x17\x86\x1e\x3d\xea\xf1\xd5\x57\x5f\x89\xb1\x80\x42\xf8\x00\x78\xa2\x02\xe4\x3d\x5a\xd2\x05\xdd\x06\x34\x81\x06\x26\x9f\x1c\x82\x89\xde\xeb\x60\xbb\x11\xc3\x4a\x65\x91\xbb\x10\x83\x7a\xc5\x1c\x81\x8b\x2e\x95\x87\x1e\xaa\x4a\xa8\x8c\x29\xe6\x02\x65\x41\xa8\xac\x67\x84\x38\x41\x0d\x14\xa8\x90\x76\xf4\x8a\x16\x5e\x74\x26\x3d\x3a\xe4\x61\xf8\x00\xff\x30\x76\xdb\x29\x3a\x17\x57\x0a\xb3\xac\x32\x50\xe0\x44\x59\x17\x8a\xe1\x20\x46\x4b\x29\x89\x0f\xfb\xfd\x2c\xb9\xeb\xb8\x13\x40\x7b\xe3\x62\xb5\x53\xac\xc1\xe6\x6d\x3f\x46\x5e\xf6\x25\x23\xee\xbd\xe6\x82\x79\x2f\x1f\x6f\xd0\xb9\xaf\x63\x25\x67\xfb\x81\x40\x61\x09\x25\xbf\x7f\x11\x6c\x0c\xdf\x17\x58\x75\x10\xa0\x51\x70\x9e\x31\xb0\xf6\x08\x1e\xcd\xa2\x03\xb1\x67\xd0\xdc\x48\xb8\x84\xda\x89\xe7\x1f\x31\x14\x4d\x01\x33\x03\x2f\xb1\x3a\x0b\xa3\x38\xc4\x8c\xe0\x68\x5e\xca\x8a\xed\xfb\x11\x1a\x59\x2b\xbe\x33\x69\xd5\xb6\xcc\x92\xcb\x2c\x98\xf3\x06\x89\xcc\x73\xb7\x33\x95\x4b\xf4\xc2\x0b\xc4\x9a\xc1\x62\xc2\x60\x31\x18\x3a\xb3\xf3\xe5\xe9\xe1\xa9\x91\x51\xb4\x73\x9d\x8d\xc6\xa6\xa3\x71\xd3\xde\xbd\x8b\x9f\xb4\x30\x2e\x37\xad\x88\x5c\xc7\xed\x1b\x97\x8f\x2d\x73\xe3\xb4\xbc\x47\x24\x3e\xe6\xf9\xd2\x9e\xd6\xd6\xb8\x86\x5f\x41\xb0\x61\x43\x7e\x71\x87\x1f\x76\xb7\xbb\x9f\xba\x7f\x4d\x2c\xfc\x6a\xff\x76\xc5\xfd\xee\xd3\x30\x58\x1c\xf9\xfe\xa6\xd3\xac\x90\x19\x43\x6b\x73\x83\xc8\xec\x94\xc5\x17\x70\x2c\x19\xc4\x59\x1b\x84\x91\x82\xfd\x45\x2d\x91\x0b\x1c\x07\x1b\xb8\x16\x92\x48\xc5\x24\x5b\x7d\x02\x4a\x7d\xaf\x74\x4e\x4d\x07\xc7\xc1\xd4\xec\x60\x9d\x45\x59\x12\xaf\x6d\x7e\xbc\x2e\x7a\xe8\x91\x58\x18\x91\x23\x41\x66\x9d\xf4\xe5\x53\x3f\x3e\x0e\x72\x74\xf2\xee\x0e\x2e\xff\x67\x1c\xb2\x66\x57\x6e\x77\xb7\xd7\x65\x3f\x7f\xa5\x24\xfa\x6c\xdf\xe3\x10\x26\x56\x4d\xed\x12\x75\x72\x78\x82\xc4\x9e\xd8\x80\x4e\x42\xb0\xb4\x59\x9d\xf1\x52\x2a\x5d\xbe\xc0\x1b\x37\xf5\x8b\x63\xe6\x2d\x18\x88\xd2\x3c\xe6\x45\x31\xe6\x17\xcc\xd0\x6b\xce\xb1\x96\x26\x8f\x31\x08\x6e\x46\xfe\xb9\x27\xfd\xaf\xc6\xa2\xcf\x40\x35\xc5\x5b\x98\xed\xd8\x4b\xd3\xe9\x4e\x09\x49\xd7\xf5\x05\xf8\xf8\x7a\x77\xa9\xcc\x78\xfd\x2c\x83\x55\xc9\xbe\xdd\xcd\x26\x6f\xa9\xf4\x9d\xd1\x4a\x12\x16\x9a\xc8\xc8\x14\xb3\x98\xb3\x61\x2a\x31\x0a\x68\x3f\xcb\x14\xc5\x24\x6a\xb5\xd5\xa1\xd2\xcc\x24\xd8\x45\xff\xd2\xc0\x05\x5d\x12\xbc\x59\xc6\xb4\x74\x2d\xc9\x90\x1e\x07\x1d\xb4\xc9\xc2\x84\xf4\xaf\xac\x3a\xa3\x4a\x59\x0a\x94\xf0\x78\x25\xe9\xa2\xc4\x9e\x5c\xda\x54\xf0\x54\x40\x66\xf4\x66\x18\xf0\xd4\x5f\x81\x87\xcf\xbf\xff\xf5\xdb\xe3\xd7\x3f\xff\x7e\x7a\xfc\xf2\xf9\xf1\xe1\x5e\x5e\x0d\x0a\x32\xa0\xda\x14\x7a\xc1\x61\xd0\x82\xbc\xf5\xb7\x26\x2b\x88\xaf\xdb\x37\xfd\xa9\x08\x0f\xe9\x79\x3e\x1c\x9e\x52\x53\x32\x1f\x0e\xf7\x37\x4a\xc9\x03\x61\x50\x20\x84\x29\xe0\x7a\x03\x6a\x02\xb5\xc1\xdb\xf1\x26\x75\x2b\x15\xa2\xba\xc4\x50\x19\x1b\x58\x99\x2a\x86\xef\x9a\x58\x87\xff\x03\x00\x00\xff\xff\x08\x3d\xd4\x11\xf5\x04\x00\x00")

func scriptsCompilationUbuntuPrerequisitesShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsCompilationUbuntuPrerequisitesSh,
		"scripts/compilation/ubuntu-prerequisites.sh",
	)
}

func scriptsCompilationUbuntuPrerequisitesSh() (*asset, error) {
	bytes, err := scriptsCompilationUbuntuPrerequisitesShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/compilation/ubuntu-prerequisites.sh", size: 1269, mode: os.FileMode(420), modTime: time.Unix(1444232057, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/compilation/fake-compile.sh": scriptsCompilationFakeCompileSh,
	"scripts/compilation/fake-prerequisites.sh": scriptsCompilationFakePrerequisitesSh,
	"scripts/compilation/ubuntu-compile.sh": scriptsCompilationUbuntuCompileSh,
	"scripts/compilation/ubuntu-prerequisites.sh": scriptsCompilationUbuntuPrerequisitesSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"compilation": &bintree{nil, map[string]*bintree{
			"fake-compile.sh": &bintree{scriptsCompilationFakeCompileSh, map[string]*bintree{
			}},
			"fake-prerequisites.sh": &bintree{scriptsCompilationFakePrerequisitesSh, map[string]*bintree{
			}},
			"ubuntu-compile.sh": &bintree{scriptsCompilationUbuntuCompileSh, map[string]*bintree{
			}},
			"ubuntu-prerequisites.sh": &bintree{scriptsCompilationUbuntuPrerequisitesSh, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// scripts/compilation/fake-compile.sh
// scripts/compilation/fake-prerequisites.sh
// scripts/compilation/ubuntu-compile.sh
// scripts/compilation/ubuntu-prerequisites.sh
// DO NOT EDIT!

package compilation

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsCompilationFakeCompileSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xad\xc8\x2c\x51\x30\x00\x04\x00\x00\xff\xff\x4f\xf8\xd2\x86\x06\x00\x00\x00")

func scriptsCompilationFakeCompileShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsCompilationFakeCompileSh,
		"scripts/compilation/fake-compile.sh",
	)
}

func scriptsCompilationFakeCompileSh() (*asset, error) {
	bytes, err := scriptsCompilationFakeCompileShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/compilation/fake-compile.sh", size: 6, mode: os.FileMode(436), modTime: time.Unix(1443218238, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsCompilationFakePrerequisitesSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xad\xc8\x2c\x51\x30\x00\x04\x00\x00\xff\xff\x4f\xf8\xd2\x86\x06\x00\x00\x00")

func scriptsCompilationFakePrerequisitesShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsCompilationFakePrerequisitesSh,
		"scripts/compilation/fake-prerequisites.sh",
	)
}

func scriptsCompilationFakePrerequisitesSh() (*asset, error) {
	bytes, err := scriptsCompilationFakePrerequisitesShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/compilation/fake-prerequisites.sh", size: 6, mode: os.FileMode(436), modTime: time.Unix(1443218238, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsCompilationUbuntuCompileSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\xcf\x6a\xf2\x40\x14\xc5\xf7\xf3\x14\x97\x7c\xe1\x5b\x14\xd2\xa0\xdb\x92\x42\x2a\xc1\x4a\x35\x8a\x8a\x9b\x52\x64\x9a\xdc\x98\x8b\x99\x3f\x64\x46\x6b\x7d\xfa\x8e\x9a\x56\x2d\x69\xbb\x1c\xce\xef\x9c\x33\xf7\x18\xb4\x10\x20\xfc\x03\xdc\x91\x05\x12\x02\x73\xe2\x16\xab\x77\xa0\x02\x38\x18\x12\xba\x42\xc8\x94\x10\x5c\xe6\x47\xc8\xc0\x1b\xd9\xd2\x69\x52\xc9\x60\x8f\xb5\x02\x63\xb9\xdd\x18\xc6\x34\xcf\xd6\x7c\x85\x29\x17\x18\xf9\x9d\xcf\xe7\x02\x6b\x43\x4a\x46\x7e\x97\x31\x97\xf9\x0c\xc1\x1e\x3c\xff\x82\xf5\xe0\xe5\x8e\xd9\x12\x25\x03\xc0\xac\x54\xe0\x4d\x4e\x22\x48\xa7\xba\x1a\x0b\x46\x63\x46\x05\x61\xee\x41\xe7\xfe\x7f\xf7\x00\x1e\xbe\xdb\x61\x05\xb5\x84\x36\x8d\x3f\xe7\x6e\x4f\xc0\xdf\xd1\x62\x9d\x53\x0d\x81\x86\x70\xcb\xeb\x70\x9b\x71\xcd\x58\xa6\x21\xa8\x21\x2c\xc8\x18\xaa\x30\x20\xf9\xa5\x85\x37\x97\x1c\xee\xb4\xaa\x2d\x3c\x8c\x67\x8f\xcb\xde\x78\x34\x19\x0c\x93\xe5\x3c\x9e\xf6\x93\x79\xe4\x9d\x2d\x46\x6d\xea\x0c\xc3\xab\x3d\xae\xac\x83\x74\x36\x8f\x87\xc3\x16\x6b\x63\x31\xbf\x98\x27\x71\xef\x29\xee\x27\xcb\x34\x1e\x25\xd1\x25\xd6\x4a\x2d\x92\xe9\x6c\x30\x4e\xa3\x6f\x3b\xba\x53\x8e\xeb\xf5\x94\xd0\x54\x91\x5c\x81\x55\xe0\xb7\x7c\xce\x63\xac\x92\x10\x98\xf3\x38\x6a\x63\x5b\x49\xb7\x62\xde\x08\xd7\xd3\xb0\x57\x6e\x4a\xb8\x6d\x6e\x73\x5d\x8c\x7d\x04\x00\x00\xff\xff\x67\x85\x29\x11\xa2\x02\x00\x00")

func scriptsCompilationUbuntuCompileShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsCompilationUbuntuCompileSh,
		"scripts/compilation/ubuntu-compile.sh",
	)
}

func scriptsCompilationUbuntuCompileSh() (*asset, error) {
	bytes, err := scriptsCompilationUbuntuCompileShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/compilation/ubuntu-compile.sh", size: 674, mode: os.FileMode(436), modTime: time.Unix(1443218238, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsCompilationUbuntuPrerequisitesSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x54\x4d\x6b\x24\x47\x0c\xbd\xf7\xaf\x10\xbb\x81\x5c\xb6\x3d\xf1\x26\x59\xc8\x86\x3d\x24\xf1\x06\x72\xb1\x21\x6c\xc8\xc5\xb0\xa8\xab\x34\xd3\xc2\xf5\xe5\x92\xca\xe3\xf6\xaf\x8f\xaa\x3c\x9e\x38\x10\x30\xed\xaa\xd2\xd7\xd3\xd3\xd3\x08\x29\xcc\x04\x6f\x81\x1e\x59\x81\x63\x24\xcf\xa8\x14\x36\xe0\x3d\x20\x08\xc7\x12\x08\x5c\x8e\x11\x93\x1f\x4e\x02\x47\xd6\xd5\x6c\x29\xa7\xf9\x89\x6a\x06\x51\xd4\x26\xd3\x48\xd5\x2c\x55\xa5\x92\xab\x82\xae\x04\x4d\xf0\x40\x90\xf7\xd0\x12\x27\x56\xc6\xc0\x4f\xe4\xe1\x01\x2b\xe3\x12\x48\xa6\xe9\x2d\xfc\x25\x34\x7c\xf7\x39\x84\x7c\xe4\x74\xb0\x53\x05\x4e\x52\xb8\xa2\x72\x4e\x1f\xcd\x69\x55\x2d\xf2\x71\xb7\x3b\x58\xed\xb6\x5c\x18\xa0\x9d\x0b\xb9\xf9\x7d\x6e\xc9\xd7\x6d\xb7\x64\x59\x77\x5a\x89\x76\x11\x45\xa9\xee\xec\x13\x1d\x85\xf0\x75\x69\x1c\xfc\x78\x30\x28\x62\xa9\xec\xef\x6f\x02\x9f\xd3\xb7\x0a\x47\x4c\x06\x34\x1b\xce\x67\x0c\x82\x91\x20\x92\x5b\x31\xb1\x44\x01\x94\x4e\xc2\x29\xd5\x85\x45\xfe\x96\x93\x22\x27\xaa\x02\xb2\xe6\x16\x3c\x2c\x16\x90\x2b\x41\xe0\xc3\xaa\x47\xea\xdf\x77\xd0\xc9\x3a\xd2\x2b\x97\xde\x6d\xaf\x6c\xb5\xdc\x4a\xb5\x6e\x50\xd8\xdd\x0d\x3f\xd7\x44\x73\x34\x5e\x20\xb7\x0a\x9e\x0a\x25\x4f\xc9\x71\x67\xc7\xd3\x22\x9f\xde\x04\x5e\x44\xc2\xec\xe9\x01\x82\x18\x99\xa2\x15\x1d\xc1\xc2\xc9\xff\x34\xaf\x59\x14\x7c\x92\xa6\x1c\x04\xd4\x15\xdf\x62\x01\x2e\xe3\x3e\x63\x2d\x9d\xd1\xdb\xc9\xb5\x1a\xe0\x78\xb0\x19\x59\xb6\x7e\xf9\xfe\x7c\x18\x89\x17\x96\x9c\xfa\x53\x25\xf4\xc1\x3a\xfc\x30\x9e\x6f\x27\x7b\x7a\x8c\xe1\x3d\x9c\xfe\x3f\xa3\xb0\xb3\x04\xbd\xbc\xb8\x3c\x1f\xc7\xfb\x13\x17\x9b\x74\xff\xde\x4e\x69\x2f\x73\xd7\x8d\x65\xdd\x07\x7a\x84\x22\x91\xc5\x01\x96\x82\xd5\x08\x9b\x9f\xf1\x72\xd1\x21\x04\x90\x4d\xba\x8e\x2c\xb0\xca\x96\x1c\x64\xa3\x41\x64\x9d\x85\xea\x03\x55\x18\x1d\xd7\xdc\xb4\x13\xbd\x24\xc3\x2d\x24\x3f\x8e\xa2\xf7\x2d\x2b\x3e\x03\x45\xce\x97\x70\xf0\xcb\x68\x0d\xcb\xfb\xd9\x28\x3a\x9f\x4f\xc0\x97\xa7\xf7\xa7\xce\x5c\xc4\x3b\x93\x68\x63\xff\x62\x3b\xb8\xba\x15\x1d\x37\x87\xb3\x15\x54\xde\xb3\xb3\x7d\x10\x73\x17\x27\xac\x39\x1b\xe8\x78\x30\x3d\xe6\x62\x73\xf7\x2d\xd0\x8c\x22\x6c\xd8\x4d\x49\x36\xae\x95\x42\x31\xbc\xd5\x04\xaf\x60\xad\xaa\xc9\xfd\x76\xc2\x84\xae\x1a\x13\x36\x3d\x3d\x62\xa5\xb9\x54\x6b\xd0\xd2\xd3\x99\x24\x53\x76\x87\x10\x37\xb9\x0f\x2e\x30\x25\xfd\x77\x00\xe5\xbe\x9f\xdf\x4c\x13\x3d\x8e\xd5\xba\xfa\xfc\xeb\x1f\xbf\x5c\x7f\xfd\xfd\xcf\x9b\xeb\x2f\x9f\xaf\xaf\x3e\xd9\x2a\x72\x32\xd5\xa3\x53\x7e\xa0\x69\x42\x6b\xa2\x8f\xba\x15\x6f\xe0\xcf\x57\xdb\x29\xc5\x10\x60\xde\xe0\x9b\xae\xac\xbe\x7d\x5f\x6e\xae\x6e\x5e\x0c\x63\xdb\xfa\xb6\x5a\xc9\x0d\x63\x78\xa5\xdf\xde\x49\xb7\xf4\x25\xa9\x6d\xd9\xfe\x13\xf2\xae\x2b\xbb\xef\xac\xbe\x56\xbc\xc5\xb8\xbb\xd3\xfa\xf7\x9f\x8d\x7c\x4c\x3f\x83\x69\x9f\xfa\x66\xbc\x40\xf9\xee\xe2\xf2\xe2\x87\x11\xdf\x8a\xc9\x9a\x30\xbe\x98\x64\xd8\x3e\xfc\x1f\xf8\x13\xbc\xce\xc9\x34\xfd\x13\x00\x00\xff\xff\x02\x75\x49\xc3\xc2\x04\x00\x00")

func scriptsCompilationUbuntuPrerequisitesShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsCompilationUbuntuPrerequisitesSh,
		"scripts/compilation/ubuntu-prerequisites.sh",
	)
}

func scriptsCompilationUbuntuPrerequisitesSh() (*asset, error) {
	bytes, err := scriptsCompilationUbuntuPrerequisitesShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/compilation/ubuntu-prerequisites.sh", size: 1218, mode: os.FileMode(436), modTime: time.Unix(1444076565, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/compilation/fake-compile.sh": scriptsCompilationFakeCompileSh,
	"scripts/compilation/fake-prerequisites.sh": scriptsCompilationFakePrerequisitesSh,
	"scripts/compilation/ubuntu-compile.sh": scriptsCompilationUbuntuCompileSh,
	"scripts/compilation/ubuntu-prerequisites.sh": scriptsCompilationUbuntuPrerequisitesSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"compilation": &bintree{nil, map[string]*bintree{
			"fake-compile.sh": &bintree{scriptsCompilationFakeCompileSh, map[string]*bintree{
			}},
			"fake-prerequisites.sh": &bintree{scriptsCompilationFakePrerequisitesSh, map[string]*bintree{
			}},
			"ubuntu-compile.sh": &bintree{scriptsCompilationUbuntuCompileSh, map[string]*bintree{
			}},
			"ubuntu-prerequisites.sh": &bintree{scriptsCompilationUbuntuPrerequisitesSh, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


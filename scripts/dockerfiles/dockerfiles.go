// Code generated by go-bindata.
// sources:
// scripts/dockerfiles/Dockerfile-base
// scripts/dockerfiles/Dockerfile-role
// scripts/dockerfiles/monitrc.erb
// DO NOT EDIT!

package dockerfiles

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsDockerfilesDockerfileBase = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8d\x41\x0a\x83\x30\x10\x45\xf7\x73\x8a\x81\x82\x3b\xcd\x15\x6a\xb1\x05\x17\x5a\x90\xf6\x00\x69\x3a\xc6\x80\x26\x69\x32\x2e\x8a\x78\xf7\x4a\x05\xc9\x62\x16\xef\xcf\xff\xbc\x5b\x77\x6f\x70\x59\xb0\xb8\xc8\x48\xf5\x24\x35\xe1\xba\x02\x34\x65\xdd\x3e\xb6\xbb\x76\x38\xa8\xfe\x3c\x78\x2a\x94\x9b\x00\x4e\x58\xdb\xc8\x72\x1c\xd1\x07\x0a\xf4\x99\x4d\x34\x4c\x31\x7d\x4c\xce\x1a\x06\xe8\x9e\x2d\x4a\xcf\xb9\x26\xc6\xd9\xbf\x25\x13\x66\xd9\x91\x98\xb4\x8c\xf9\x17\xca\xaa\xda\x21\xa8\x82\xc2\x0b\x85\xf3\x2c\x36\xb5\x48\xc2\xd4\xa2\x9c\xed\x8d\xd6\xc6\xc2\x7f\x7a\xe0\x3e\x3c\x50\xc0\x2f\x00\x00\xff\xff\xb0\xbc\x67\x62\xe1\x00\x00\x00")

func scriptsDockerfilesDockerfileBaseBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDockerfilesDockerfileBase,
		"scripts/dockerfiles/Dockerfile-base",
	)
}

func scriptsDockerfilesDockerfileBase() (*asset, error) {
	bytes, err := scriptsDockerfilesDockerfileBaseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/dockerfiles/Dockerfile-base", size: 225, mode: os.FileMode(420), modTime: time.Unix(1444342117, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsDockerfilesDockerfileRole = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\xa8\xae\x56\xd0\x0b\xca\xcf\x49\x75\x4a\x2c\x4e\xf5\xcc\x4d\x4c\x4f\x55\xa8\xad\xe5\xe2\xf2\x75\xf4\xf4\x0b\x01\x62\xd7\x20\x85\x8c\xe4\x34\x87\x8c\x82\x54\xbd\xe4\xfc\x5c\x2e\x2e\x1f\x47\x27\x57\x1f\x05\xa5\x22\xa0\x06\x25\x5b\xa5\xea\x6a\xb0\xd6\xda\x5a\x25\xa0\x50\x6a\x4e\x2a\xd0\x08\xdd\xb2\xd4\xa2\xe2\xcc\xfc\x3c\xa8\x2c\x44\x50\x2f\x0c\x22\x08\x56\x88\xa2\x00\x21\xc1\xc5\xc5\x05\x08\x00\x00\xff\xff\x64\x0f\x2d\xe9\x90\x00\x00\x00")

func scriptsDockerfilesDockerfileRoleBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDockerfilesDockerfileRole,
		"scripts/dockerfiles/Dockerfile-role",
	)
}

func scriptsDockerfilesDockerfileRole() (*asset, error) {
	bytes, err := scriptsDockerfilesDockerfileRoleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/dockerfiles/Dockerfile-role", size: 144, mode: os.FileMode(420), modTime: time.Unix(1444329435, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsDockerfilesMonitrcErb = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xce\xdd\x6a\xc3\x30\x0c\x05\xe0\x7b\x3f\xc5\xc1\x10\xd8\x06\xcb\x8f\x6f\x36\xc6\xda\x77\x51\x2d\xa7\x49\x71\x6d\x63\x3b\x09\x7d\xfb\xba\xf5\x4d\x21\x14\x81\x40\x9c\x4f\x42\xc9\x64\x30\x99\xab\x77\x18\x7a\xf1\x98\xac\x3f\x8f\xb3\x35\xe8\x56\x8a\xdd\xaa\x29\x74\x25\x9c\x73\xed\x6d\x49\xc5\x93\x4d\x39\x07\x46\xf0\x31\x43\xfd\x2a\x05\x72\x8c\x25\x19\x10\x73\x34\x29\x61\x50\x3f\x6d\x5f\x6a\x10\x00\x59\xeb\x37\xc8\xff\xe6\x80\xf0\x21\x27\x3d\xb6\xf5\x58\xf1\x51\x7e\xa2\x39\xca\xbf\x7d\x18\x28\xa5\xcd\x47\xae\x00\xd1\x10\x7f\x7b\x67\x6f\x42\xcc\x4e\xdb\x85\xf7\x1f\x7e\xd5\xcd\xa8\xdf\x8a\x8b\x3f\xbd\xa8\x7b\x00\x00\x00\xff\xff\x77\x3e\x7e\x87\xfc\x00\x00\x00")

func scriptsDockerfilesMonitrcErbBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDockerfilesMonitrcErb,
		"scripts/dockerfiles/monitrc.erb",
	)
}

func scriptsDockerfilesMonitrcErb() (*asset, error) {
	bytes, err := scriptsDockerfilesMonitrcErbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/dockerfiles/monitrc.erb", size: 252, mode: os.FileMode(420), modTime: time.Unix(1444342105, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/dockerfiles/Dockerfile-base": scriptsDockerfilesDockerfileBase,
	"scripts/dockerfiles/Dockerfile-role": scriptsDockerfilesDockerfileRole,
	"scripts/dockerfiles/monitrc.erb": scriptsDockerfilesMonitrcErb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"dockerfiles": &bintree{nil, map[string]*bintree{
			"Dockerfile-base": &bintree{scriptsDockerfilesDockerfileBase, map[string]*bintree{
			}},
			"Dockerfile-role": &bintree{scriptsDockerfilesDockerfileRole, map[string]*bintree{
			}},
			"monitrc.erb": &bintree{scriptsDockerfilesMonitrcErb, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


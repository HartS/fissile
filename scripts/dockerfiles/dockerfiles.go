// Code generated by go-bindata.
// sources:
// scripts/dockerfiles/Dockerfile-base
// scripts/dockerfiles/Dockerfile-role
// scripts/dockerfiles/monitrc.erb
// scripts/dockerfiles/run.sh
// DO NOT EDIT!

package dockerfiles

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsDockerfilesDockerfileBase = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xce\xc1\x8a\x83\x30\x10\x06\xe0\x7b\x20\xef\x30\xb0\xe0\x4d\xf3\x0a\xeb\xe2\x2e\x78\xd0\x05\x69\x1f\x20\x4d\xc7\x18\xd0\x24\x4d\xc6\x43\x11\xdf\xbd\x86\x82\xd5\x43\x0e\xf9\xfe\xf9\x99\xf9\xeb\xfe\x1b\x58\x16\x28\x7e\x64\xc4\x7a\x92\x1a\x61\x5d\x39\xe3\xac\x29\xeb\xf6\xb2\xbd\xdf\x0e\x06\xd5\x7f\x0f\x1e\x0b\xe5\xa6\x94\x7c\x41\x6d\x23\xc9\x71\x04\x1f\x30\xe0\x63\x36\xd1\x10\xc6\x73\x34\x39\x6b\x28\x51\x77\x6d\x41\x7a\xca\x35\x12\xcc\xfe\x2e\x09\x21\xcb\x76\x31\xc7\x71\xc8\x9f\x9c\x95\x55\xf5\xfe\x05\x55\x60\xb8\x81\x70\x9e\xc4\x76\x81\x38\xe0\x79\x95\x72\xb6\x37\x5a\x1b\x9b\x38\xd5\x77\xf8\x94\x77\x12\x9c\xbd\x02\x00\x00\xff\xff\x19\x5d\x08\xbe\xf3\x00\x00\x00")

func scriptsDockerfilesDockerfileBaseBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDockerfilesDockerfileBase,
		"scripts/dockerfiles/Dockerfile-base",
	)
}

func scriptsDockerfilesDockerfileBase() (*asset, error) {
	bytes, err := scriptsDockerfilesDockerfileBaseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/dockerfiles/Dockerfile-base", size: 243, mode: os.FileMode(438), modTime: time.Unix(1444348345, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsDockerfilesDockerfileRole = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\xdf\x4b\xc3\x30\x10\xc7\xdf\x0b\xfd\x1f\x8e\xe8\xeb\x12\x9f\x85\x81\x95\x55\x50\xb6\x4e\xca\x10\x44\x64\xa4\xe9\x69\x3b\xd7\xa6\x34\x5d\x1d\x8c\xfd\xef\x5e\x9a\xfe\x70\xb0\x87\x42\x72\xdf\xcf\xe7\x7a\x47\x9e\xe2\xf5\x0a\x4e\x27\xc8\xcb\x14\x8f\xc0\x81\x25\xd2\xe0\x36\x2f\xe4\x37\x32\x38\x9f\x7d\xcf\xf7\x56\xc1\x73\xb4\xa1\x2f\x8c\x21\x53\x5f\x0f\x59\x85\x5c\xe9\xc2\x26\xe4\xfd\xe6\x4d\x06\xb7\x4a\x97\x0d\x1e\x1b\xb8\x9f\x53\x0b\x6b\x8d\x49\xad\xf7\x68\xcb\x63\x7f\x5b\x60\x97\xcc\x4e\x27\x13\xd2\x19\xfc\x45\x27\x06\xee\x2c\xb5\x0c\x1e\xc3\x65\xaf\xcd\x19\x39\x0e\x88\x64\x81\xd4\x85\x51\x82\x7b\xa4\x99\x67\x2d\xd6\x26\xd7\x65\x0f\x51\x4f\x1e\xbb\x84\xbf\xb9\xc4\xe1\x17\x58\xff\xcb\x61\x7c\xd6\xed\xbd\x1d\x10\x2b\x74\x63\x62\x99\x0e\x13\x5f\x39\xfa\xde\x0d\x04\x69\x0a\x95\x54\x3f\xa4\x1b\xdf\x0b\x16\x8b\xf1\x06\xa2\x95\xb5\x68\x95\xac\xc4\x50\x12\x93\x63\x57\x37\xfa\x50\xab\x41\xdb\xd9\xc5\x27\x85\xae\xb3\x3e\xff\x67\xd5\x87\x92\x9b\xcc\x09\xee\x0c\x42\x57\x8d\xa0\xe7\xe9\xa8\x30\xda\xc4\xef\xaf\x6b\x7a\x36\xf8\x60\x63\xe2\x48\xf6\xe9\x7b\x7f\x01\x00\x00\xff\xff\x5f\x32\x5f\x5f\xf5\x01\x00\x00")

func scriptsDockerfilesDockerfileRoleBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDockerfilesDockerfileRole,
		"scripts/dockerfiles/Dockerfile-role",
	)
}

func scriptsDockerfilesDockerfileRole() (*asset, error) {
	bytes, err := scriptsDockerfilesDockerfileRoleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/dockerfiles/Dockerfile-role", size: 501, mode: os.FileMode(438), modTime: time.Unix(1444348345, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsDockerfilesMonitrcErb = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8e\xdd\x6a\xc3\x30\x0c\x85\xef\x03\x79\x87\x83\x21\xb0\x0d\x96\x1f\xdf\x6c\x8c\xb5\xef\xa2\x5a\x4e\x93\xe2\xda\xc6\x76\x12\xfa\xf6\x75\xf0\x4d\x21\x14\x81\x40\x7c\xdf\x11\x27\xea\x04\x26\x7d\x77\x16\x43\x5f\x57\xfb\x69\xdc\x75\x9c\x8d\x46\xb7\x52\xe8\x56\x45\xbe\xcb\x74\x4e\x65\xb7\x99\xd6\x55\x11\xa7\x94\x3c\xc3\xbb\x90\x20\x7f\xa5\x04\x59\xc6\x12\x35\x88\x39\xe8\x18\x31\xc8\x9f\xb6\xcf\x33\xd4\x15\x40\xc6\xb8\x0d\xe2\xbf\x39\xc1\x7f\x88\x49\x8d\x6d\xf9\x97\x03\x41\x7c\xa2\x39\x8b\xbf\x23\xf4\x14\xe3\xe6\x02\x17\x01\x41\x13\x7f\x3b\x6b\x1e\x7b\x83\xd9\x2a\xb3\xf0\xb1\xe6\x57\xc9\x06\xf5\x5e\xb9\xb9\xcb\xab\xf6\x0c\x00\x00\xff\xff\xa0\x9d\x8a\x4b\x04\x01\x00\x00")

func scriptsDockerfilesMonitrcErbBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDockerfilesMonitrcErb,
		"scripts/dockerfiles/monitrc.erb",
	)
}

func scriptsDockerfilesMonitrcErb() (*asset, error) {
	bytes, err := scriptsDockerfilesMonitrcErbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/dockerfiles/monitrc.erb", size: 260, mode: os.FileMode(438), modTime: time.Unix(1444348345, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsDockerfilesRunSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x54\x4d\x8f\xd3\x30\x10\xbd\x47\xca\x7f\x18\xdc\x48\x7b\xd9\xd4\x7c\xdc\x16\xf5\xc6\x05\x0e\x68\x05\xdc\x96\x55\xe4\x24\x4e\xe3\x55\x6b\x47\xb6\x53\x56\x44\xfd\xef\x8c\xdd\x38\x69\xdc\x72\x81\x45\xf8\xe4\x76\x9e\xe7\xbd\x37\x1f\x59\xbd\xa2\xa5\x90\xb4\x64\xa6\x4d\x13\xc3\x2d\xe4\x3c\x4d\xd2\xa4\x52\xd2\xf4\xbb\x82\xd5\xb5\xe6\xc6\x6c\xb2\x37\x69\x22\x1a\x78\x78\x80\xfc\x27\x64\xcb\x20\x3c\x3e\xbe\x07\xdb\x72\x99\x26\x00\xd1\x3b\x32\x0c\x20\x64\xcd\x9f\x61\x0d\xa4\xe6\x0d\xeb\x77\xb6\x58\x62\x08\x1c\x8f\x24\x4d\x1a\x31\xd2\x36\x62\x5b\x18\xab\x34\x2f\x3a\xcd\x1b\xf1\xbc\xc9\xde\x46\xdc\x31\x22\x16\x70\x91\xe1\x77\x2a\x62\xe0\x42\x8a\x56\x3b\x5e\x08\x69\x2c\x93\x95\xbb\xe0\xf3\x4d\xf6\xee\x5c\xca\x15\xc4\x42\xca\xb5\x0c\xaf\x43\xfa\x15\xdc\x6b\x55\xb9\xf2\x59\xbe\xef\x76\xcc\x72\x93\x26\xa8\xf3\x87\xb0\xed\x29\x35\xdc\x6d\x66\xd5\xee\x0f\x27\xcf\x63\x34\x93\x5b\x0e\x99\xb8\x85\xec\x49\x95\x0e\xb7\xfe\xa4\x4a\xe3\xa2\x2b\xd8\xbc\xe0\x71\xf9\xc2\xf9\x16\x64\x42\xa3\x34\x38\x5e\x54\xe2\xf8\xd7\x9f\xd9\x9e\xc3\xbf\x20\x9f\xad\x3e\xa1\xd5\x50\x27\xe7\xd7\xf3\xce\x8a\x1c\x39\x55\x9d\xa5\x6d\xd5\xd0\x53\x63\xb7\x38\xd4\xd3\x0d\xbe\xbb\x7e\xe4\x79\xcd\x2c\x83\x9b\x81\xe0\x6b\x72\x07\x03\x10\x89\xd2\xf1\x46\x22\x2b\x58\xe9\x5b\x20\xbe\xf8\x18\xcd\x86\x2b\x9d\x74\x80\x8e\x69\xc4\x5b\xae\x8d\xcb\x76\x84\xe3\x4d\x20\x52\xbd\xed\x7a\x0b\x40\xe8\x81\x69\x7a\xa8\x58\x47\x31\xbd\xa1\x11\x0f\xfe\x9e\x6c\xad\x3f\x70\x63\x85\x64\x56\x28\x79\xcf\x6c\xeb\x54\x8c\xd9\x4e\x0b\x83\xd9\xb2\x61\xb9\x3b\x33\x64\xdc\x84\x11\x12\x0f\xf6\x8c\xf3\x83\x85\x07\x1d\xfb\x21\xf3\x4a\xce\xa8\x5c\x5f\x43\x3c\x08\x9d\xc2\x91\x9b\xdc\xe8\xea\xc2\xd1\x34\xcd\x3e\x32\x99\xfb\xaa\x7a\x5d\x71\xe7\xeb\xb4\x63\x7f\x38\x2a\x7e\x26\xb8\xac\xc3\x26\x84\xeb\xf9\x3e\xed\x95\x14\x56\x57\x6b\xae\xcb\x69\xb7\xfe\x72\x3c\xf0\x5d\xee\xd3\xe6\x7b\x66\xb0\xdf\x2f\x38\x1f\xdc\x56\x74\x54\xfc\x5f\xfb\x7d\x69\x71\x6c\x79\xa8\xdb\x59\x59\x89\x2b\x78\x54\xfd\x2f\x3d\x7e\xf3\x3c\x06\xf2\xc3\xc7\x5f\x01\x00\x00\xff\xff\x11\x3f\x6e\xcb\x56\x06\x00\x00")

func scriptsDockerfilesRunShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDockerfilesRunSh,
		"scripts/dockerfiles/run.sh",
	)
}

func scriptsDockerfilesRunSh() (*asset, error) {
	bytes, err := scriptsDockerfilesRunShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/dockerfiles/run.sh", size: 1622, mode: os.FileMode(438), modTime: time.Unix(1444349800, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/dockerfiles/Dockerfile-base": scriptsDockerfilesDockerfileBase,
	"scripts/dockerfiles/Dockerfile-role": scriptsDockerfilesDockerfileRole,
	"scripts/dockerfiles/monitrc.erb": scriptsDockerfilesMonitrcErb,
	"scripts/dockerfiles/run.sh": scriptsDockerfilesRunSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"dockerfiles": &bintree{nil, map[string]*bintree{
			"Dockerfile-base": &bintree{scriptsDockerfilesDockerfileBase, map[string]*bintree{
			}},
			"Dockerfile-role": &bintree{scriptsDockerfilesDockerfileRole, map[string]*bintree{
			}},
			"monitrc.erb": &bintree{scriptsDockerfilesMonitrcErb, map[string]*bintree{
			}},
			"run.sh": &bintree{scriptsDockerfilesRunSh, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


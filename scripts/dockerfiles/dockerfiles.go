// Code generated by go-bindata.
// sources:
// scripts/dockerfiles/Dockerfile-base
// scripts/dockerfiles/Dockerfile-role
// scripts/dockerfiles/monitrc.erb
// scripts/dockerfiles/run.sh
// DO NOT EDIT!

package dockerfiles

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsDockerfilesDockerfileBase = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\xdd\x4a\x03\x31\x10\x85\xef\xe7\x29\x0e\x08\xed\x55\x76\x5f\xc1\x4a\x55\xf6\xa2\x15\x16\x7d\x80\x98\x9d\x6e\x03\xcd\x8f\xc9\xac\x20\xa5\xef\x6e\x1a\xb1\xcd\x45\x02\xf3\xe5\x7c\x27\xf3\x32\xbe\xed\x70\x3e\xa3\x7b\xd2\x99\x07\xa7\x67\xc6\xe5\x42\xb4\xdb\x0c\xfb\xf7\x72\x9e\x47\x1c\xcd\xe1\xf1\x18\xb9\x33\xc1\x11\x3d\x60\xf0\x59\xf4\xe9\x84\x98\x38\xf1\xd7\x62\xb3\x15\xce\x34\x7e\xec\xb1\x64\x4e\x7a\x9a\xa0\x1c\x94\x2a\x69\xc7\x5e\xb0\x2e\x7a\x7d\x59\xe3\xdb\xe8\x88\xd5\xaa\x4e\x2e\x94\xdc\x2b\xf4\xe4\x2a\x6e\x8b\x5d\xf0\x56\xa8\x36\xea\x28\x6a\x66\xc1\x12\x27\x2d\x7c\x75\xff\x89\x6d\xc3\x48\xcb\xf5\x56\x3f\xb4\xd9\x6e\xff\x50\x32\x1d\xa7\x4f\xf4\x21\x4a\x5f\x36\xe8\x1b\xd8\xfe\x65\x82\x3f\xd8\x79\xb6\x9e\xaa\x7a\x1b\xef\xe2\x0d\xf5\xf4\x1b\x00\x00\xff\xff\x8e\x27\xfa\x8d\x2b\x01\x00\x00")

func scriptsDockerfilesDockerfileBaseBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDockerfilesDockerfileBase,
		"scripts/dockerfiles/Dockerfile-base",
	)
}

func scriptsDockerfilesDockerfileBase() (*asset, error) {
	bytes, err := scriptsDockerfilesDockerfileBaseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/dockerfiles/Dockerfile-base", size: 299, mode: os.FileMode(436), modTime: time.Unix(1444430770, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsDockerfilesDockerfileRole = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x5f\x4b\xc3\x30\x10\xc0\xdf\xf3\x29\x8e\xe8\xeb\x12\x9f\x85\x81\x95\x4d\x50\xf6\x47\xca\x10\x44\x64\x74\xe9\xcd\x76\x76\x4d\x49\xba\x39\x28\xfd\xee\x5e\x9a\xb4\x65\xf8\xe4\xc3\x20\x77\xf7\xfb\x5d\xee\x96\x3e\xc5\xeb\x25\x34\x0d\xe4\x65\x8a\x17\x10\xc0\x77\x89\xc5\x6d\x7e\x4c\xbe\x90\x43\xdb\x32\xb6\x8c\x9e\x57\x1b\xfa\xcd\x63\xc8\xd4\xfe\x21\xab\x50\x28\x7d\x64\x8c\x9c\x9f\xbc\xce\xe0\x56\xe9\xb2\xc6\x4b\x0d\xf7\x53\xd2\xc9\x18\x0a\x46\x17\xe8\xb2\x43\x6b\x97\xe0\x57\xc8\x41\xef\x46\xa2\x13\xc4\x8b\xde\x59\xb8\x23\x68\x11\x3d\xce\x17\x41\x9a\x72\x52\x7c\x7d\x95\x1c\x91\x7a\x70\xaa\x60\x81\x34\xec\xe4\x8c\xc6\xe6\xba\x0c\x10\xb5\x14\xb1\xaf\x88\x37\x5f\xf1\xf8\x15\x16\x6e\xec\x67\xe7\xdd\xc2\xdb\x1e\x71\x82\x1b\x12\xcb\x34\x8c\xfb\xe7\xc4\x6e\x20\x4a\x53\xa8\x12\xf5\x4d\xa6\x65\xd1\x6c\x36\x04\x20\xcf\x89\x91\x67\x95\x54\xb2\x4f\xc9\x5e\x70\x1b\x5b\x7d\x32\x2a\x38\x07\xb7\xee\xc8\xbb\x70\x62\x8d\x1a\x78\x73\x2a\x85\xcd\x3a\xd4\x1f\x41\xea\xaa\x96\xf4\x14\x72\x7c\x03\x51\xe4\x0a\x4b\xeb\xfe\x97\xa0\xf5\x89\x7d\x5e\x60\x27\x37\x8d\x68\xdb\xd1\xb5\x59\x62\x50\xa6\x9a\x2e\xba\xda\xce\xb7\x2b\x75\x4d\xfe\xd8\x2d\xc4\xff\x6a\xc6\xe6\xab\x4d\xfc\xfe\xba\xa6\xaf\x07\x3e\xf8\xc0\xfa\x25\xf8\x27\xfb\x0d\x00\x00\xff\xff\xe0\x32\x29\x34\x79\x02\x00\x00")

func scriptsDockerfilesDockerfileRoleBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDockerfilesDockerfileRole,
		"scripts/dockerfiles/Dockerfile-role",
	)
}

func scriptsDockerfilesDockerfileRole() (*asset, error) {
	bytes, err := scriptsDockerfilesDockerfileRoleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/dockerfiles/Dockerfile-role", size: 633, mode: os.FileMode(436), modTime: time.Unix(1444425879, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsDockerfilesMonitrcErb = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xce\xdd\x6a\xc3\x30\x0c\x05\xe0\x7b\x3f\xc5\xc1\x10\xd8\x06\xcb\x8f\x6f\x36\xc6\xda\x77\x51\x2d\xa7\x49\x71\x6d\x63\x3b\x09\x7d\xfb\xba\xf5\x4d\x21\x14\x81\x40\x9c\x4f\x42\xc9\x64\x30\x99\xab\x77\x18\x7a\xf1\x98\xac\x3f\x8f\xb3\x35\xe8\x56\x8a\xdd\xaa\x29\x74\x25\x9c\x73\xed\x6d\x49\xc5\x93\x4d\x39\x07\x46\xf0\x31\x43\xfd\x2a\x05\x72\x8c\x25\x19\x10\x73\x34\x29\x61\x50\x3f\x6d\x5f\x6a\x10\x00\x59\xeb\x37\xc8\xff\xe6\x80\xf0\x21\x27\x3d\xb6\xf5\x58\xf1\x51\x7e\xa2\x39\xca\xbf\x7d\x18\x28\xa5\xcd\x47\xae\x00\xd1\x10\x7f\x7b\x67\x6f\x42\xcc\x4e\xdb\x85\xf7\x1f\x7e\xd5\xcd\xa8\xdf\x8a\x8b\x3f\xbd\xa8\x7b\x00\x00\x00\xff\xff\x77\x3e\x7e\x87\xfc\x00\x00\x00")

func scriptsDockerfilesMonitrcErbBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDockerfilesMonitrcErb,
		"scripts/dockerfiles/monitrc.erb",
	)
}

func scriptsDockerfilesMonitrcErb() (*asset, error) {
	bytes, err := scriptsDockerfilesMonitrcErbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/dockerfiles/monitrc.erb", size: 252, mode: os.FileMode(436), modTime: time.Unix(1444363419, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsDockerfilesRunSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\x5b\x6f\xd3\x30\x14\x7e\xcf\xaf\x38\x78\x91\xfa\xb2\x24\xed\xb8\x49\x65\xd9\x13\x3c\x80\x10\x4c\x5c\x9e\x46\x15\xb9\x89\xd3\x64\xa4\x76\x64\x3b\x1b\xa2\xea\x7f\xe7\xd8\xb9\xd6\x2b\x2f\x30\x34\x4d\x22\x7d\x49\xcf\xf5\xfb\xce\xf9\xec\x9c\x3c\x89\xd6\x25\x8f\xd6\x54\x15\x9e\x62\x1a\x02\xe6\x79\x65\x0e\x57\x57\x40\xfc\x05\x81\x38\x06\x12\x04\x05\xab\x6a\x02\xab\xd5\x2b\xd0\x05\xe3\x5e\x4a\x35\x9c\x9f\xbf\xf9\xf8\xde\xfb\xaa\xe8\x86\x2d\x41\x36\x3c\x54\x05\x5c\x9d\xa7\x82\xab\xa6\x4a\x68\x96\x49\xa6\xd4\xc5\xaa\x35\xe5\xe5\x26\x51\x5a\x48\x96\xd4\x92\xe5\xe5\x0f\x6b\x97\xa2\x62\x49\xc9\x95\xa6\x3c\x35\x2f\x19\x6b\xed\x65\x7d\x90\x9e\x71\x95\x48\x96\x0a\x99\x25\x9c\x6e\xd9\xc5\xca\x33\x7d\xf3\xd2\xf3\x0e\x7b\xc5\xfe\xa2\xc3\x1d\xfc\x04\xff\xd0\x37\x22\x07\x70\xb2\xc8\x6e\x07\xb6\x37\x84\x40\x32\x96\xd3\xa6\xd2\xc9\x61\x0c\x81\xfd\x9e\xf4\x1d\x5d\x2a\xb1\x7f\x76\xd8\xd6\x0d\x70\x7a\xdf\xc9\xff\x1d\x00\x37\x70\x44\x71\x64\x70\xb1\xff\x74\x82\xe2\x48\xc0\x14\xc5\xb1\xfc\xb9\xad\x3c\x8e\x3e\xf6\x9f\x4d\x0a\x8e\xf6\x69\x9d\x49\x34\x59\x9c\xbd\x0c\xe7\xf8\x5b\xb4\x10\x9d\xa5\xc5\xfe\xf3\x49\x35\xc7\x39\x2d\xe9\xe6\x91\x4a\xa4\xb4\x2a\x84\xd2\x6d\xdd\x13\xb8\x94\x22\x35\x38\x34\xdb\xd6\x15\xd5\x4c\x79\x38\xbf\xdb\x52\x17\x2d\x6d\x58\xc6\xe3\x34\x8d\xc1\x8c\xcd\x84\x48\xca\x37\x0c\x99\x9c\x82\x7f\x2d\xd6\x26\x2c\x7c\x27\xd6\x0a\x9d\x27\xa8\xf1\xfb\x7b\xb0\x5c\xff\x7c\xe9\x21\x42\x2e\x24\x98\xae\x88\xc3\x74\x0f\x3f\x18\xda\xf7\xdf\x7a\xa4\x79\x8d\x34\xfb\x09\x19\xae\xb6\xeb\x88\x07\x5b\x47\xa2\xd6\x51\x91\xe6\x51\x2b\xb5\x0d\x5e\x01\xc3\x1b\x7c\xc3\x55\x04\x41\x46\x35\x85\xd9\x8e\x60\x2e\x59\xc2\x0e\x88\x59\x09\xbe\x11\x87\x06\x8e\xf8\x14\x88\x9d\x3a\x7a\x67\xc4\xdf\x1d\x51\xd8\x9e\xcc\x30\xa8\xa6\x12\x73\x34\x93\xca\x54\x34\x69\x9c\xe9\x5b\x21\xbf\xab\xb6\x43\xa7\x7f\xb2\xc4\xf7\xb2\x26\x4b\x62\xaa\x8d\x3a\xc3\x22\x04\x73\x1c\x95\x74\x61\x8e\xd5\xc4\xee\xf7\xfb\x59\x47\x46\x34\xba\x6e\x34\x00\x89\x6e\xa8\x8c\x6e\x52\x5a\x47\x48\x41\x45\x0e\x17\xfc\x3f\x0c\x2e\x7c\xcd\x94\x2e\x39\xd5\xa5\xe0\x97\x54\x17\x86\x69\x5b\xac\xbd\x1f\xb0\x98\xbf\x3b\xbc\x2a\x86\x88\xee\xec\x77\x11\xee\x59\x1e\xc2\xac\x64\xf1\xc1\x91\x5a\xf9\x5a\x18\x63\x1f\xa3\x99\xde\xdd\x83\xec\xbd\x0e\x91\x40\xc9\xf4\x0e\x99\xe1\x90\x58\xcf\xc0\xeb\xb3\x68\x64\xca\x0c\x25\x7b\xa7\xfc\xa1\x0a\x8d\xdc\x18\xcf\xfe\x81\x8e\x1f\xf0\x08\xfd\x3f\x16\xd1\x56\xf0\x52\xbb\x52\x0a\xad\x55\xa6\x8f\xed\x04\x58\xd8\xf7\x21\xf1\xc9\xa7\xa7\x1b\x45\xc8\xe4\x7a\xf8\x0c\xfd\x95\x70\x30\x2d\xb0\x45\x83\x2d\x55\xa8\x82\x47\xa6\x1c\xa6\xd3\xe8\xa1\xe5\x71\x77\x84\xad\x42\xfa\xad\x4c\x76\x46\xbc\xe9\x5a\xd3\x62\x2b\x32\x98\xbf\x98\xcf\x61\x4a\xc4\xec\xfb\x53\xc3\x3d\xfb\x17\x82\x9b\xb7\xde\xaf\x00\x00\x00\xff\xff\x20\xb2\x56\x9c\x28\x0b\x00\x00")

func scriptsDockerfilesRunShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDockerfilesRunSh,
		"scripts/dockerfiles/run.sh",
	)
}

func scriptsDockerfilesRunSh() (*asset, error) {
	bytes, err := scriptsDockerfilesRunShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/dockerfiles/run.sh", size: 2856, mode: os.FileMode(436), modTime: time.Unix(1444427302, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/dockerfiles/Dockerfile-base": scriptsDockerfilesDockerfileBase,
	"scripts/dockerfiles/Dockerfile-role": scriptsDockerfilesDockerfileRole,
	"scripts/dockerfiles/monitrc.erb": scriptsDockerfilesMonitrcErb,
	"scripts/dockerfiles/run.sh": scriptsDockerfilesRunSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"dockerfiles": &bintree{nil, map[string]*bintree{
			"Dockerfile-base": &bintree{scriptsDockerfilesDockerfileBase, map[string]*bintree{
			}},
			"Dockerfile-role": &bintree{scriptsDockerfilesDockerfileRole, map[string]*bintree{
			}},
			"monitrc.erb": &bintree{scriptsDockerfilesMonitrcErb, map[string]*bintree{
			}},
			"run.sh": &bintree{scriptsDockerfilesRunSh, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// scripts/dockerfiles/Dockerfile-base
// scripts/dockerfiles/Dockerfile-role
// DO NOT EDIT!

package dockerfiles

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsDockerfilesDockerfileBase = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcc\xcf\x0a\x82\x40\x10\xc7\xf1\xbb\xe0\x3b\x0c\x04\x1e\x02\xf5\x15\x32\x2c\xf0\xa0\xc1\x52\x0f\xb0\x6c\xe3\x3a\xe0\xfe\xc9\x1d\x0f\x21\xbe\x7b\xed\x25\xf3\x30\x97\xcf\xef\xcb\x5c\xc5\xad\x85\x65\x81\xe2\x2c\x03\x36\x46\x6a\x84\x75\x4d\x93\x34\x69\xab\xa6\xbb\x7f\xef\x22\x60\x50\xfd\x69\xf0\x58\x28\x67\xe2\x72\x80\xc6\x06\x96\xe3\x08\x7e\xc2\x09\x5f\x33\x05\x62\x0c\xfb\xc9\x38\x4b\x1c\x49\x3c\x3a\x90\x9e\x73\x8d\x0c\xb3\x7f\x4a\x46\xc8\xb2\x9f\xd0\x7f\x0e\xf9\x7b\xff\x44\x39\xdb\x93\xd6\x64\x23\x57\x75\xbd\x41\x79\x84\xd2\x79\x2e\x37\x88\xc9\x27\x00\x00\xff\xff\xb7\xd3\xa6\xa9\xcd\x00\x00\x00")

func scriptsDockerfilesDockerfileBaseBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDockerfilesDockerfileBase,
		"scripts/dockerfiles/Dockerfile-base",
	)
}

func scriptsDockerfilesDockerfileBase() (*asset, error) {
	bytes, err := scriptsDockerfilesDockerfileBaseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/dockerfiles/Dockerfile-base", size: 205, mode: os.FileMode(438), modTime: time.Unix(1444289393, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsDockerfilesDockerfileRole = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\xa8\xae\x56\xd0\x0b\xca\xcf\x49\x75\x4a\x2c\x4e\xf5\xcc\x4d\x4c\x4f\x55\xa8\xad\xe5\xe5\xe2\xe5\xf2\x75\xf4\xf4\x0b\x01\x62\xd7\x20\x85\x8c\xe4\x34\x87\x8c\x82\x54\xbd\xe4\xfc\x5c\x90\x8c\x8f\xa3\x93\xab\x8f\x82\x52\x11\x50\x93\x92\xad\x52\x75\x35\x58\x7b\x6d\xad\x12\x50\x28\x35\x27\x15\x68\x8c\x6e\x59\x6a\x51\x71\x66\x7e\x1e\x54\x16\x22\xa8\x17\x06\x11\x04\x2b\x44\x51\x80\x90\x00\x99\xce\xcb\x05\x08\x00\x00\xff\xff\x54\xc3\x1a\x25\x97\x00\x00\x00")

func scriptsDockerfilesDockerfileRoleBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDockerfilesDockerfileRole,
		"scripts/dockerfiles/Dockerfile-role",
	)
}

func scriptsDockerfilesDockerfileRole() (*asset, error) {
	bytes, err := scriptsDockerfilesDockerfileRoleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/dockerfiles/Dockerfile-role", size: 151, mode: os.FileMode(438), modTime: time.Unix(1444277014, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/dockerfiles/Dockerfile-base": scriptsDockerfilesDockerfileBase,
	"scripts/dockerfiles/Dockerfile-role": scriptsDockerfilesDockerfileRole,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"dockerfiles": &bintree{nil, map[string]*bintree{
			"Dockerfile-base": &bintree{scriptsDockerfilesDockerfileBase, map[string]*bintree{
			}},
			"Dockerfile-role": &bintree{scriptsDockerfilesDockerfileRole, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// scripts/templates/transformations.yml
// scripts/templates/transformations_code.yml
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsTemplatesTransformationsYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x90\xd1\x6a\xf3\x30\x0c\x85\xef\x7f\xf8\xdf\x41\x78\x01\x5b\xeb\x6a\xb6\xdb\xc0\x9e\xa4\xce\x46\x48\x9c\xd6\xb0\xda\xc6\x51\x59\x21\xf4\xdd\xa7\x2c\xcb\xda\x84\x66\x63\x30\xe6\x3b\xeb\x48\xfa\x74\x0e\xa5\xd2\xb7\x4d\x48\xfb\x92\x5c\xf0\x6d\xfe\xff\x1f\xc0\x0d\x44\x25\x62\x49\x3b\x4d\x41\x57\xc1\x37\x6e\x2b\x10\x42\xe2\xb2\x9c\x96\x25\xf6\xfd\x6b\xe0\xe9\x6a\x97\x83\x7c\x32\xed\x6d\x34\x6a\x23\xa4\x2c\xba\x87\xd3\x66\x6d\x5e\x8d\x2e\x56\xe3\xdf\x20\xeb\x99\xec\x67\x00\xc2\x81\xe2\x81\x78\x48\x29\xe7\x6b\x7b\x04\x0d\xf7\x88\x1f\xe2\xb5\xb3\xfa\x77\x46\x2d\x31\xe4\xd8\xfa\x0d\xe1\x2b\xca\x8c\xc4\x84\x62\x25\x2f\xc5\x8b\xdd\x5d\x37\xee\x56\x8a\xd7\x6d\x2d\x64\xae\x3e\xde\x41\x66\x5f\xec\xde\x7a\x82\xfc\x91\x35\x44\xa1\xd4\xb9\xc6\x5f\x6e\xb7\xbe\x46\x3c\x0d\x17\x73\xe6\x29\x44\x9b\xc8\xd9\x56\x4f\x43\xbe\x12\xf1\x67\xab\xd1\xa3\xff\x5f\x4c\x76\xee\xf7\x67\x5e\x11\x19\xdb\x80\x1f\xc4\x9e\xbc\x64\x7d\x9e\x40\xed\x92\xad\xe8\x79\xc9\xf5\x70\xd7\xdf\xfa\x14\x93\xd5\xe2\xfd\xd4\xb7\x00\x00\x00\xff\xff\xe5\xd6\x60\xb5\x33\x03\x00\x00")

func scriptsTemplatesTransformationsYmlBytes() ([]byte, error) {
	return bindataRead(
		_scriptsTemplatesTransformationsYml,
		"scripts/templates/transformations.yml",
	)
}

func scriptsTemplatesTransformationsYml() (*asset, error) {
	bytes, err := scriptsTemplatesTransformationsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/templates/transformations.yml", size: 819, mode: os.FileMode(438), modTime: time.Unix(1444026850, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scriptsTemplatesTransformations_codeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x29\x4a\xcc\x2b\x4e\xcb\x2f\xca\x4d\x2c\xc9\xcc\xcf\x2b\xb6\xe2\xe5\x52\x50\x50\x56\x48\xcc\x53\x48\x2d\x4a\x52\x48\xce\x4f\x49\x55\x48\xcd\x4b\x51\x48\xca\xc9\x4f\xce\xb6\x52\xb0\x51\x05\xf3\x54\xed\x40\xaa\x74\x15\x80\x7a\x92\x33\xac\x14\xd4\xe3\x62\x8a\xb5\x80\xe2\x40\x52\x45\x1d\x24\xa3\xa0\x90\x5f\x5a\x52\x50\x5a\x02\x94\xaa\xae\x06\xeb\xa8\xad\x55\xc7\x62\x70\x4e\x71\x2a\xb2\xc9\x20\x2e\x56\xa3\x81\x12\xb8\xcc\x06\xe9\x01\x1b\x0e\x08\x00\x00\xff\xff\xf5\xd9\x81\x9c\xc8\x00\x00\x00")

func scriptsTemplatesTransformations_codeYmlBytes() ([]byte, error) {
	return bindataRead(
		_scriptsTemplatesTransformations_codeYml,
		"scripts/templates/transformations_code.yml",
	)
}

func scriptsTemplatesTransformations_codeYml() (*asset, error) {
	bytes, err := scriptsTemplatesTransformations_codeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/templates/transformations_code.yml", size: 200, mode: os.FileMode(438), modTime: time.Unix(1444026880, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/templates/transformations.yml": scriptsTemplatesTransformationsYml,
	"scripts/templates/transformations_code.yml": scriptsTemplatesTransformations_codeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"transformations.yml": &bintree{scriptsTemplatesTransformationsYml, map[string]*bintree{
			}},
			"transformations_code.yml": &bintree{scriptsTemplatesTransformations_codeYml, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


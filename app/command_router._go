package app

import (
	"fmt"
	"path/filepath"

	"github.com/codegangsta/cli"
)

// CommandRouter will dispatch CLI commands to their relevant functions
func (f *Fissile) CommandRouter(c *cli.Context) {
	var paths map[string]string
	var releasePaths []string
	var err error
	switch c.Command.FullName() {
	case "dev jobs-report",
		"dev packages-report",
		"dev compile",
		"dev create-images",
		"dev list-roles",
		"dev config-gen":
		{
			paths, err = absolutePathsForFlags(c, "work-dir", "light-opinions", "dark-opinions", "roles-manifest", "cache-dir")
			if err != nil {
				f.cmdErr = err
				return
			}

			releasePaths, err = absolutePathsForArray(c.StringSlice("release"))
			if err != nil {
				f.cmdErr = err
				return
			}
		}
	case "dev config-diff":
		{
			releasePaths, err = absolutePathsForArray(c.StringSlice("release"))
			if err != nil {
				f.cmdErr = err
				return
			}
			paths, err = absolutePathsForFlags(c, "cache-dir")
			if err != nil {
				f.cmdErr = err
				return
			}
		}
	default:
		{
			paths, err = absolutePathsForFlags(c, "release", "work-dir", "configgin", "light-opinions", "dark-opinions", "roles-manifest", "cache-dir")
			if err != nil {
				f.cmdErr = err
				return
			}
		}
	}

	extendPathsFromWorkDirectory(paths)
	switch c.Command.FullName() {
	case "compilation build-base":
		err = f.CreateBaseCompilationImage(
			c.String("base-image"),
			c.String("repository"),
			c.Bool("debug"),
		)
	case "compilation show-base":
		err = f.ShowBaseImage(
			c.String("base-image"),
			c.String("repository"),
		)
	case "images create-base":
		err = f.GenerateBaseDockerImage(
			paths["base-docker-file"],
			paths["configgin"],
			c.String("base-image"),
			c.Bool("no-build"),
			c.String("repository"),
		)
	case "dev jobs-report":
		if err = validateReleaseArgs(c); err != nil {
			break
		}

		err = f.LoadReleases(
			releasePaths,
			c.StringSlice("release-name"),
			c.StringSlice("release-version"),
			paths["cache-dir"],
		)
		if err != nil {
			break
		}
		err = f.ListJobs()
	case "dev packages-report":
		if err = validateReleaseArgs(c); err != nil {
			break
		}

		err = f.LoadReleases(
			releasePaths,
			c.StringSlice("release-name"),
			c.StringSlice("release-version"),
			paths["cache-dir"],
		)
		if err != nil {
			break
		}
		err = f.ListPackages()
	case "dev compile":
		if err = validateDevReleaseArgs(c); err != nil {
			break
		}

		err = f.loadDevReleases(
			releasePaths,
			c.StringSlice("release-name"),
			c.StringSlice("release-version"),
			paths["cache-dir"],
		)
		if err != nil {
			break
		}
		err = f.CompileDev(
			c.String("repository"),
			paths["compilation-dir"],
			paths["roles-manifest"],
			c.Int("workers"),
		)
	case "dev create-images":
		if err = validateDevReleaseArgs(c); err != nil {
			break
		}

		err = f.loadDevReleases(
			releasePaths,
			c.StringSlice("release-name"),
			c.StringSlice("release-version"),
			paths["cache-dir"],
		)
		if err != nil {
			break
		}
		err = f.GenerateRoleDevImages(
			paths["docker-dir"],
			c.String("repository"),
			c.Bool("no-build"),
			c.Bool("force"),
			paths["roles-manifest"],
			paths["compilation-dir"],
			paths["light-opinions"],
			paths["dark-opinions"],
		)
	case "dev list-roles":
		if err = validateDevReleaseArgs(c); err != nil {
			break
		}

		err = f.loadDevReleases(
			releasePaths,
			c.StringSlice("release-name"),
			c.StringSlice("release-version"),
			paths["cache-dir"],
		)
		if err != nil {
			break
		}
		err = f.ListDevRoleImages(
			c.String("repository"),
			paths["roles-manifest"],
			c.Bool("docker-only"),
			c.Bool("with-sizes"),
		)
	case "dev config-gen":
		if err = validateDevReleaseArgs(c); err != nil {
			break
		}

		err = f.loadDevReleases(
			releasePaths,
			c.StringSlice("release-name"),
			c.StringSlice("release-version"),
			paths["cache-dir"],
		)
		if err != nil {
			break
		}
		err = f.GenerateDevConfigurationBase(
			paths["roles-manifest"],
			paths["light-opinions"],
			paths["dark-opinions"],
			paths["config-dir"],
			c.String("provider"),
		)
	case "dev config-diff":
		if err = validateDevReleaseArgs(c); err != nil {
			break
		}
		err = f.DiffDevConfigurationBases(
			releasePaths,
			paths["cache-dir"],
		)
	}

	f.cmdErr = err
}

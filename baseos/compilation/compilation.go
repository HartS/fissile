// Code generated by go-bindata.
// sources:
// baseos/compilation/ubuntu.sh
// DO NOT EDIT!

package compilation

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseosCompilationUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x53\xdd\x6a\xdc\x4c\x0c\xbd\x0f\xe4\x1d\x44\xbe\x0f\x7a\x53\xc7\x24\xa5\x85\x06\x7a\xd5\x67\x28\xbd\x29\x14\xcd\x8c\xd6\x16\x99\xbf\x8e\x34\x71\x9c\xa7\xaf\xc6\xd9\x5d\x0a\xbb\x63\x8d\xac\x9f\x73\x8e\xe4\xdb\x9b\xff\xe0\x87\x10\xe8\x4a\x70\x2a\x31\x96\x8d\xf3\x62\x56\x03\xce\x52\xb9\xa1\x72\xc9\x4f\x23\x6a\x55\xad\xf2\x34\xcf\x0b\xeb\xda\xdd\xbd\x2f\x69\xf6\xb1\xf4\x70\x2a\x3d\x87\xb6\xcf\xae\xc8\x3a\x6b\x23\x9a\x13\x8a\x52\x9b\xed\x48\x9e\x62\xfc\xed\x3a\xc7\x70\x38\x70\x21\x19\xb5\xc6\xff\x27\x41\x28\xf9\x83\xc2\x86\x59\x41\x0b\xf4\x33\x0c\xc1\x44\x90\xc8\xaf\x98\x59\x92\x00\xda\x0f\x2e\xc5\xee\x47\xea\xf7\x92\x15\x39\x53\x13\x90\xb5\xf4\x18\xc0\x59\x46\x69\x04\x91\x97\x55\x37\x1a\xe7\x47\xc0\x1c\x60\xa3\x7f\x42\xd0\x45\x3a\x7a\x5b\x37\xbf\x52\x6b\x3b\x54\xf6\xcf\x47\xa0\xef\xa2\x25\xf1\x1b\x41\xe9\x0d\x02\x55\xca\x81\xb2\xe7\x01\xf8\xf6\x26\x90\x93\x6f\x77\x91\x9d\x48\x9c\x02\xbd\x40\x94\x72\x32\x50\x0d\x3d\x81\xe3\x1c\xbe\x4e\x6b\x11\x85\x90\xa5\x2b\x47\x01\xf5\x35\xf4\x54\x81\xeb\x71\x9f\xb0\xd5\x21\xec\xaf\xdb\x1b\xdf\x5b\x84\x6d\x21\x35\xb0\x6e\x5c\x3e\x5d\x8d\xa3\xb2\x63\x29\x79\xb8\x1a\x61\x88\xc6\xf2\xcb\xe1\xb6\x4c\xf3\xbd\xa6\xf8\x08\xe7\xe7\x3b\x0e\xb3\x25\xea\xc3\xfd\xc3\xd5\x3c\xfc\x6f\x5c\xa1\xe7\x71\x5a\x62\x3e\xc9\x64\xf3\x4a\x56\xf7\x14\xe9\x15\xaa\x24\x16\x0f\x58\x2b\x36\x93\x6d\x7a\x87\xcc\x55\x87\x40\xa6\xe9\x2e\x36\x2a\x1d\x99\x4d\xf6\xec\xa1\x98\x18\x22\xeb\x24\xd4\x5e\xa8\xc1\xc1\xba\x95\xae\x43\x6f\x97\x0d\xba\x90\x7c\x3e\xda\xfe\xe9\x45\xf1\x8c\x15\xb9\x3c\xc0\x12\xdc\x41\x0f\xeb\xe3\x64\x3a\x5d\xed\x33\x76\xf7\xf6\x78\x61\xe7\x13\x3e\x13\xf4\xce\xe1\xf2\x72\xf1\x6d\xaf\x7a\xdc\x3c\x4e\xd6\x52\xf9\xc4\x1e\xd5\x20\x5a\xbc\x78\x61\x2d\xc5\x80\xa7\xc5\x96\xb3\x54\xdb\x80\xd0\x23\x4d\x28\xc2\x86\xdf\x96\xca\xa6\xb6\x52\xac\x06\xb9\xf5\xcc\x0a\x46\x57\x29\x8c\x64\xcc\xe8\x9b\xc9\x61\x53\xd4\x0d\x1b\x4d\xb5\x19\x49\x6b\x40\x17\xa5\xee\x2c\xc8\x9a\x8f\x39\xd9\x97\xa0\x18\x23\x4c\x3b\xfc\x3f\x16\x61\x2c\xc4\xdf\x00\x00\x00\xff\xff\x4b\xa4\x4d\xfc\x38\x03\x00\x00")

func baseosCompilationUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_baseosCompilationUbuntuSh,
		"baseos/compilation/ubuntu.sh",
	)
}

func baseosCompilationUbuntuSh() (*asset, error) {
	bytes, err := baseosCompilationUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "baseos/compilation/ubuntu.sh", size: 824, mode: os.FileMode(438), modTime: time.Unix(1442550962, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"baseos/compilation/ubuntu.sh": baseosCompilationUbuntuSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"baseos": &bintree{nil, map[string]*bintree{
		"compilation": &bintree{nil, map[string]*bintree{
			"ubuntu.sh": &bintree{baseosCompilationUbuntuSh, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


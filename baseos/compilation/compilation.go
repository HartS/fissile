// Code generated by go-bindata.
// sources:
// baseos/compilation/ubuntu.sh
// DO NOT EDIT!

package compilation

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseosCompilationUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x93\xc1\x6a\x1c\x3d\x0c\xc7\xef\xf3\x14\x22\xdf\x07\xbd\x74\xb2\x24\xa5\x85\x06\x72\x68\x9b\x14\x7a\x49\xa1\xb4\xf4\xb2\x10\x34\xb6\x76\x46\xc4\x63\xb9\x96\x9c\xcd\xe6\xe9\xab\x99\x6c\x96\x82\xf1\xca\x5a\x5b\xfa\xe9\x2f\x4d\xf7\x1f\xfc\x52\x02\x9b\x08\x76\x92\x92\xec\x39\x8f\x6e\x55\xe0\xac\x85\x2b\x1a\x4b\xbe\xf2\x4b\x93\x59\xd1\xab\xcd\x66\x64\x9b\xda\x70\x1e\x64\xde\x84\x24\x2d\xee\xa4\xe5\x58\x0f\x9b\x41\x74\xda\x58\x25\xda\xcc\xa8\x46\x75\xe3\xdb\x1c\x28\xa5\xfb\xa1\x71\x8a\xab\x03\x47\x52\x0f\xe5\xeb\x37\x41\x94\xfc\xc6\x60\x8f\xd9\xc0\x04\xda\x91\x41\x71\x26\x98\x29\x4c\x98\x59\x67\x05\xf4\x05\xaf\xa1\xce\xfd\xe5\x17\xc9\x86\x9c\xa9\x2a\xe8\x24\x2d\x45\x18\xfc\x81\x54\x82\xc4\xe3\x64\x7b\x5a\xf6\xb7\x80\x39\xc2\x9e\xfe\xb9\x82\x43\xa2\x25\xb3\xe7\x0a\x13\xd5\x7a\x80\xc2\xe1\x61\xbd\x17\x9a\x9a\xcc\xfc\x4c\x20\xad\x42\xa4\x42\x39\x52\x0e\xec\xb0\x5d\xa4\x41\xaf\xcf\x12\x0f\xaa\xa9\x8f\xf4\x08\x49\x65\xe7\x40\x15\x03\xc1\xc0\x39\x7e\xec\x27\x51\x83\x98\xb5\x19\x27\x05\x0b\x25\xb6\xb9\x00\x97\xf5\xdc\x63\x2d\x8b\xa2\xdb\x2e\xb4\x9a\x60\x3f\x92\x39\xe8\xb0\x1c\xde\x9d\x8c\x35\xf0\xc0\x2a\x79\x71\x55\xc2\x98\xbc\xc2\x0f\xab\x7b\xdb\xb9\xeb\x69\x4e\x97\x70\xfc\x7d\xa1\x70\x5b\x93\x5d\x9c\x5f\x9c\xcc\xd5\xff\xcc\x05\x5a\x5e\xf6\x6d\x97\x77\xda\x7b\x9b\x66\x8f\xba\x4b\xf4\x04\x45\x67\xd6\x00\x58\x0a\x56\x17\xac\x7f\xe1\xe5\x62\x8b\x34\xae\xe6\x41\xbd\x43\xe6\x0f\xab\x1e\x72\x00\x71\x19\x54\xa7\x5e\xa9\x3e\x52\x85\xb5\xe2\x2a\xcd\x16\xa1\x87\xec\xdc\x4a\xfa\x7e\x4d\xfa\xa7\x89\xe1\x0b\x28\xb2\x5c\xc0\x18\x87\xb5\x34\x2c\x97\xbd\x4b\x74\xb2\x8f\xe0\xc3\xf3\xe5\xb1\xb2\x30\xe3\x03\x41\x6b\x1c\x5f\xff\x1b\x43\x3d\x14\x5b\x4f\x01\x7b\x4f\x68\xbc\xe3\x80\xe6\x7c\xdb\x4e\x83\xb2\x89\x38\xf4\x3c\xfa\x3c\x4a\xf1\xbe\xc7\x96\xa8\x47\x55\x76\x76\x9f\x24\x6f\xd7\x44\xa9\x38\x6f\x6d\x99\x0d\xbc\x54\xa3\xe8\x6f\x31\x63\xa8\xae\x84\x77\xcf\xf6\x58\xa9\x2f\xd5\x0b\xf4\xf0\xf4\x2a\xd2\x59\xd7\xd1\x53\x91\x6a\x70\x73\xfb\xf9\xdb\xa7\xbb\xfb\xaf\x3f\xbe\xdf\xfd\xbc\xbd\xbb\xb9\xce\x92\x39\xfb\x48\x63\x30\x7e\xa4\xae\x43\x27\x5c\xfa\xd8\x4a\x74\xb2\xd3\xd1\x3f\x18\xc3\x94\xa0\x3f\xc0\xff\xcb\xd8\x74\xdd\xdf\x00\x00\x00\xff\xff\x08\x20\x47\x9e\x5c\x03\x00\x00")

func baseosCompilationUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_baseosCompilationUbuntuSh,
		"baseos/compilation/ubuntu.sh",
	)
}

func baseosCompilationUbuntuSh() (*asset, error) {
	bytes, err := baseosCompilationUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "baseos/compilation/ubuntu.sh", size: 860, mode: os.FileMode(436), modTime: time.Unix(1442622654, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"baseos/compilation/ubuntu.sh": baseosCompilationUbuntuSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"baseos": &bintree{nil, map[string]*bintree{
		"compilation": &bintree{nil, map[string]*bintree{
			"ubuntu.sh": &bintree{baseosCompilationUbuntuSh, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

